RXJAVA 2.X:
-----------

	RxJava implementa el patron Observer. En ese sentido existen 2 clases diferenciadas: El Observador y el
	Observado.
	
		Ejemplo 1:
			Se puede apreciar como se genera una clase Observable y 2 Observers, estos ultimos son suscritos al Observable.
			
			Operaciones de la interfaz Observer:
			La operacion onNext es invocada cada vez que una nuevo evento es publicado.
			La operacion onCompleted es invocada cuando la secuencia de eventos asociada con un Observable ha sido completada.
			La operacion onSubscribe es invocada cuando se suscribe un Observer.
		
			Nota:
				Parece que el algoritmo de rxjava sobre Observable y Observer,cuando se realiza subscribe, una vez que un 
				Observer es suscrito se ejecutan automaticamente todas las operaciones de onSubscribe onNext y onComplete,
				ya que en la prueba del ejemplo1 se emitio todos los println del Observer 1 y luego todas las del Observer2. 
		
		
		Ejemplo 2,3:
			
			En este ejemplo ya no se crea un Observer, si no un Consumidor, se implementa de io.reactivex.functions.Consumer
			y no de java function. Ademas en este caso a diferencia de la clase Observer, solo se implementa un metodo
			(propio de una interfaz funcional) accept(T t), ello tiene ciertas implicancias, por ejemplo que el metodo
			onError sea implementado en otro Consumidor y el onCompleted en un Action, pero esto es opcional en el metodo
			subscribe.
			
		Ejemplo 4:
			Es parecido al ejemplo 1, 2 o 3 pero se usa lambda en lugar de clases personalizadas.
	 
	 
	Operadores:
	-----------
	
		Ejemplo 5 (MAP):
			Este ejemplo hace uso del metodo Observable.map, este metodo recibe una io.reactivex.functions.Function
			esta function recibe un parametro y devuelve un valor.
			
			El metodo map sirve para realizar algun cambio(conversion u operacion) sobre todos los elementos 
			del observable, devuelve un Obsevable<R>. 
		
		Ejemplo 6 (SCAN):
			Este ejemplo hace uso del metodo Observable.scan, este metodo recibe una BiFunction de 3 parametros,
			siendo el tercer parametro el devuelto, los 2 primeros parametros son los operandos. 
			El metodo scan lo que hace es tomar el primer item (emitido o en la lista) y operarlo con el 2do,
			el resultado de esa operacion sera tomado como 1er parametro en la siguiente llamada.
	
	Connectable:
	-----------
	
		Ejemplo 11:
			Como se puede evidenciar en este ejemplo, en un ConnectableObserver no se invoca al consumidor
			(subscribe) de manera inmediata,si no mas bien se espera a la invocacion del metodo connect.
			En este ejemplo para mostrarse los numeros se creo un Thread puesto que la emision de los 
			numero recien empieza en el periodo de creacion del Observable.literal.
			
			El metodo Observable.literal crea un Observabler<Long> que emite una serie de valores cada cierto
			periodo.
			
		Ejemplo 12:
			En este ejemplo se hace uso del metodo publish de un Observable, se puede apreciar que no se 
			necesita de un periodo ni del Thread.sleep, como en el ejemplo anterior, todas los items fueron
			procesados cuando se invoco al metodo connect.
	
	
	Publish:
	-------
	
		Ejemplo 15:
			En este ejemplo en la clase PublishSubject pueden subscribirse Observers a demanda. A estos Observers
			se les enviara los Items recien cuando ellos son subscritos.
	
	
	Tipos de Observables:
	--------------------
	
		Blocking: Sincronos
		
		Non-Blocking: Asincronos
	
	
	Scheluders:
	----------
	
		Schedulers.newThread:
		--------------------
			Simplementa inicia un nuevo hilo cada vez que es solicitado via subscribeOn o observeOn. Casi nunca es una buena eleccion, no solo debido a la latencia debido al inicio de un nuevo hilo
			si no tambien por que el hilo no es reusado.
			
			Quizas pueda ser usado cuando la tarea a ejecutarse es de grano grueso, cuando es una tarea compleja y va a tomar mucho tiempo, y ademas el numero de tareas similares es bajo.
		
		
		Schedulers.immediate:
		--------------------
			
		
		
		Schedulers.trampoline:
		---------------------
		
		
		Schedulers.from:
		---------------
		
		
		Schedulers.io:
		-------------
			Es similar a newThread excepto por el hecho de que los hilos iniciados son reclicados y puede ser reutilizados para procesar futuros request. Esta implementacion trabaja similarmente a
			ThreadPoolExecutor de java.util.concurrent con un ilimitado pool de hilos. Cada vez que un nuevo worker es solicitado, un nuevo hilo es iniciado o un hilo idle es reusado. Hay que tener
			en consideracion que este scheluder puede instanciar un numero grande de hilos dependiendo de la concurrencia de la aplicacion.
			
		
		Schedulers.computation:
		----------------------
		
			Este scheluder por defecto limita el numero de hilos que corren en paralelo al numero de procesadores de la pc o servidor. Por lo tanto se usara este scheluder cuando 
		
		
		Schedulers.test:
		
		
		
		Default Schedulers:
			
		
	

	Observaciones:
		- El metodo just a lo maximo puede tener 9 parametros, si se quiere crear un Observable con mas parametros
		  se puede usar el metodo fromArray(T...)
		  
		- Cada vez que se genera un onError o un onCompleted se debe invocar a dispose por medio del Disposable
		  pero esta llamada se hace naturalmente por el framework, a lo cual no es necesario codearla a menos
		  que se quiera terminar el flujo, en caso de Observable se llama a dispose() y en caso de Flowable a
		  cancel().
	  
	
URLs:
	https://medium.com/@vanniktech/rxjava-2-disposable-under-the-hood-f842d2373e64
	


